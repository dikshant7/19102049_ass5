#include<bits/stdc++.h>
using namespace std;
void bfs(int i,vector<int>adj[],vector<int>&vis,vector<int>&bfstrav)
{
    vis[i]=1;
    queue<int>q;
    q.push(i);
    while(q.size()!=0)
    {
        int node=q.front();
        q.pop();
        bfstrav.push_back(node);
        for(int j=0;j<adj[node].size();j++)
        {
            if(vis[adj[node][j]]==0)
            {
                q.push(adj[node][j]);
                vis[adj[node][j]]=1;
            }
        }
    }
}
void dfs(int node,vector<int>adj[],vector<int>&vis,vector<int>&dfstrav)
{
    vis[node]=1;
    dfstrav.push_back(node);
    for(int j=0;j<adj[node].size();j++)
    {
        if(vis[adj[node][j]]==0)
        {
            dfs(adj[node][j],adj,vis,dfstrav);
        }
    }
}
int main()
{
    cout<<"enter number of vertices"<<endl;
    int V;//vertices in graph
    cin>>V;
    vector<int>adj[V];//adjacency list;
    cout<<"enter nuumber of edges"<<endl;
    int e;
    cin>>e;//edges in graphs
     cout<<"enter edges of graph in pair of two"<<endl;
    for(int i=0;i<e;i++)//adding componenets of graph in adjacenecy list 
    {
       //creating graph
        int u,v;
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    vector<int>visbfs(V,0);
    vector<int>bfstrav;//bfs traversal
    for(int i=0;i<V;i++)
    {
        if(visbfs[i]==0)
        {
            bfs(i,adj,visbfs,bfstrav);
        }
    }
    vector<int>visdfs(V,0);
    vector<int>dfstrav;//dfs traversal
    for(int i=0;i<V;i++)
    {
        if(visdfs[i]==0)
        {
            dfs(i,adj,visdfs,dfstrav);
        }
    }
   
    
}